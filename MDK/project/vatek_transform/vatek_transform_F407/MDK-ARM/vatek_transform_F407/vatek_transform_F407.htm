<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [vatek_transform_F407\vatek_transform_F407.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image vatek_transform_F407\vatek_transform_F407.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Oct 17 10:28:02 2023
<BR><P>
<H3>Maximum Stack Usage =        736 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_sample_tf_play_program &rArr; _sample_tf_lockfreq &rArr; vatek_demod_lock &rArr; avl68xx_lock &rArr; AVL_Demod_SetMode &rArr; AVL_ParseFwPatch_v0 &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3b]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">CUSTOM_HID_DeInit_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_DeInit_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[12]">CUSTOM_HID_Init_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_Init_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[14]">CUSTOM_HID_OutEvent_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_OutEvent_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[77]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7e]">DVBTx_GetLockStatus_Demod</a> from avl_demod_dvbtx.o(i.DVBTx_GetLockStatus_Demod) referenced from avl_demod_commoninternal.o(i.SetInternalFunc_Demod)
 <LI><a href="#[81]">DVBTx_GetPrePostBER_Demod</a> from avl_demod_dvbtx.o(i.DVBTx_GetPrePostBER_Demod) referenced from avl_demod_commoninternal.o(i.SetInternalFunc_Demod)
 <LI><a href="#[7f]">DVBTx_GetSNR_Demod</a> from avl_demod_dvbtx.o(i.DVBTx_GetSNR_Demod) referenced from avl_demod_commoninternal.o(i.SetInternalFunc_Demod)
 <LI><a href="#[80]">DVBTx_GetSignalQuality_Demod</a> from avl_demod_dvbtx.o(i.DVBTx_GetSignalQuality_Demod) referenced from avl_demod_commoninternal.o(i.SetInternalFunc_Demod)
 <LI><a href="#[7d]">DVBTx_Initialize_Demod</a> from avl_demod_dvbtx.o(i.DVBTx_Initialize_Demod) referenced from avl_demod_commoninternal.o(i.SetInternalFunc_Demod)
 <LI><a href="#[26]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[79]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[78]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[75]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7b]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[2b]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">USBD_CUSTOM_HID_DataIn</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DataIn) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[1a]">USBD_CUSTOM_HID_DataOut</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DataOut) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[16]">USBD_CUSTOM_HID_DeInit</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DeInit) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[18]">USBD_CUSTOM_HID_EP0_RxReady</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_EP0_RxReady) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[1e]">USBD_CUSTOM_HID_GetDeviceQualifierDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetDeviceQualifierDesc) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[1c]">USBD_CUSTOM_HID_GetFSCfgDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetFSCfgDesc) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[1b]">USBD_CUSTOM_HID_GetHSCfgDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetHSCfgDesc) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[1d]">USBD_CUSTOM_HID_GetOtherSpeedCfgDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetOtherSpeedCfgDesc) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[15]">USBD_CUSTOM_HID_Init</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_Init) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[17]">USBD_CUSTOM_HID_Setup</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_Setup) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[10]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[b]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[11]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[c]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[d]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[e]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[f]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[24]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[0]">_cmdline_help</a> from vatek_sample_transform.o(i._cmdline_help) referenced 2 times from vatek_sample_transform.o(.data)
 <LI><a href="#[7]">_default_cli_dump_reg_all</a> from uart_cmdline.o(i._default_cli_dump_reg_all) referenced 2 times from uart_cmdline.o(.data)
 <LI><a href="#[8]">_default_cli_dump_reg_one</a> from uart_cmdline.o(i._default_cli_dump_reg_one) referenced 2 times from uart_cmdline.o(.data)
 <LI><a href="#[9]">_default_cli_dump_reg_range</a> from uart_cmdline.o(i._default_cli_dump_reg_range) referenced 2 times from uart_cmdline.o(.data)
 <LI><a href="#[6]">_default_cli_help</a> from uart_cmdline.o(i._default_cli_help) referenced 2 times from uart_cmdline.o(.data)
 <LI><a href="#[a]">_default_cli_write_reg_one</a> from uart_cmdline.o(i._default_cli_write_reg_one) referenced 2 times from uart_cmdline.o(.data)
 <LI><a href="#[4]">_sample_tf_lockfreq</a> from vatek_sample_transform.o(i._sample_tf_lockfreq) referenced 2 times from vatek_sample_transform.o(.data)
 <LI><a href="#[3]">_sample_tf_play_allprogram</a> from vatek_sample_transform.o(i._sample_tf_play_allprogram) referenced 2 times from vatek_sample_transform.o(.data)
 <LI><a href="#[2]">_sample_tf_play_program</a> from vatek_sample_transform.o(i._sample_tf_play_program) referenced 2 times from vatek_sample_transform.o(.data)
 <LI><a href="#[82]">fputc</a> from usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[7a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5]">sample_tf_statusmsg</a> from vatek_sample_transform.o(i.sample_tf_statusmsg) referenced 2 times from vatek_sample_transform.o(.data)
 <LI><a href="#[1]">sample_tf_stop</a> from vatek_sample_transform.o(i.sample_tf_stop) referenced 2 times from vatek_sample_transform.o(.data)
 <LI><a href="#[86]">vatek_porting_i2c_read</a> from vatek_porting_i2c.o(i.vatek_porting_i2c_read) referenced from vatek_system.o(i.vatek_system_i2c_create)
 <LI><a href="#[83]">vatek_porting_i2c_set_speed</a> from vatek_porting_i2c.o(i.vatek_porting_i2c_set_speed) referenced from vatek_system.o(i.vatek_system_i2c_create)
 <LI><a href="#[84]">vatek_porting_i2c_start</a> from vatek_porting_i2c.o(i.vatek_porting_i2c_start) referenced from vatek_system.o(i.vatek_system_i2c_create)
 <LI><a href="#[87]">vatek_porting_i2c_stop</a> from vatek_porting_i2c.o(i.vatek_porting_i2c_stop) referenced from vatek_system.o(i.vatek_system_i2c_create)
 <LI><a href="#[85]">vatek_porting_i2c_write</a> from vatek_porting_i2c.o(i.vatek_porting_i2c_write) referenced from vatek_system.o(i.vatek_system_i2c_create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[1db]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[88]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1dc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1dd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1de]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1df]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[1e0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1e1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[1f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_pure_psitable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_tsp_setfilterparm
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_pure_psitable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
</UL>

<P><STRONG><a name="[1e2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_pure_psitable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_pure_psitable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1e6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1e7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1e8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>AVL_Demod_DVBCAutoLock</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, avl_demod_dvbc.o(i.AVL_Demod_DVBCAutoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AVL_Demod_DVBCAutoLock &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbc
</UL>

<P><STRONG><a name="[94]"></a>AVL_Demod_DVBSxAutoLock</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, avl_demod_dvbsx.o(i.AVL_Demod_DVBSxAutoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AVL_Demod_DVBSxAutoLock &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBSx_GetFunctionalMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write16_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbsx
</UL>

<P><STRONG><a name="[95]"></a>AVL_Demod_DVBSx_GetFunctionalMode</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, avl_demod_dvbsx.o(i.AVL_Demod_DVBSx_GetFunctionalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AVL_Demod_DVBSx_GetFunctionalMode &rArr; II2C_Read16_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read16_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBSxAutoLock
</UL>

<P><STRONG><a name="[98]"></a>AVL_Demod_DVBTxChannelScan</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, avl_demod_dvbtx.o(i.AVL_Demod_DVBTxChannelScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AVL_Demod_DVBTxChannelScan &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_SetBandWidth_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbtx
</UL>

<P><STRONG><a name="[9b]"></a>AVL_Demod_DVBTxGetModulationInfo</STRONG> (Thumb, 1728 bytes, Stack size 48 bytes, avl_demod_dvbtx.o(i.AVL_Demod_DVBTxGetModulationInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AVL_Demod_DVBTxGetModulationInfo &rArr; II2C_Read16_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read16_Demod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI_DVBT2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI_DVBT
</UL>

<P><STRONG><a name="[c2]"></a>AVL_Demod_GetLockStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avl_demod_commonapi.o(i.AVL_Demod_GetLockStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AVL_Demod_GetLockStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBER_Demod
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_getstatus
</UL>

<P><STRONG><a name="[9d]"></a>AVL_Demod_ISDBTAutoLock</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, avl_demod_isdbt.o(i.AVL_Demod_ISDBTAutoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AVL_Demod_ISDBTAutoLock &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISDBT_SetIFFrequency_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_isdbt
</UL>

<P><STRONG><a name="[9f]"></a>AVL_Demod_SetMode</STRONG> (Thumb, 1030 bytes, Stack size 48 bytes, avl_demod_commonapi.o(i.AVL_Demod_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = AVL_Demod_SetMode &rArr; AVL_ParseFwPatch_v0 &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSParallelOrder_Demod
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSPacketLen_Demod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSMode_Demod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSErrorPola_Demod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSErrorBit_Demod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPLL_Demod
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInternalFunc_Demod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGPIOStatus_Demod
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitErrorStat_Demod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_Initialize_Demod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_CheckChipReady_Demod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMode_Demod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableTSOutput_Demod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_patch_read32
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_Delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerI2C_Initialize_Demod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSValidPola_Demod
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSSerialSyncPulse_Demod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSSerialPin_Demod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSSerialOrder_Demod
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSParallelPhase_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_lock
</UL>

<P><STRONG><a name="[a4]"></a>AVL_IBSP_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, user_defined_function.o(i.AVL_IBSP_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AVL_IBSP_Delay &rArr; vatek_system_delay &rArr; vatek_porting_system_delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPLL0_Demod
</UL>

<P><STRONG><a name="[131]"></a>AVL_IBSP_I2C_Read</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, user_defined_function.o(i.AVL_IBSP_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AVL_IBSP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read_Demod
</UL>

<P><STRONG><a name="[130]"></a>AVL_IBSP_I2C_Write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, user_defined_function.o(i.AVL_IBSP_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AVL_IBSP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write_Demod
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read_Demod
</UL>

<P><STRONG><a name="[12d]"></a>AVL_IBSP_ReleaseSemaphore</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_defined_function.o(i.AVL_IBSP_ReleaseSemaphore))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write_Demod
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read_Demod
</UL>

<P><STRONG><a name="[197]"></a>AVL_IBSP_SetActiveI2C</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_defined_function.o(i.AVL_IBSP_SetActiveI2C))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_lock
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_getstatus
</UL>

<P><STRONG><a name="[12b]"></a>AVL_IBSP_WaitSemaphore</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_defined_function.o(i.AVL_IBSP_WaitSemaphore))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write_Demod
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read_Demod
</UL>

<P><STRONG><a name="[a3]"></a>AVL_ParseFwPatch_v0</STRONG> (Thumb, 2920 bytes, Stack size 216 bytes, avl_demod_commoninternal.o(i.AVL_ParseFwPatch_v0))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AVL_ParseFwPatch_v0 &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read32_Demod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read16_Demod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChunkAddr_Demod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_patch_read32
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write_Demod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write16_Demod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[a2]"></a>AVL_patch_read32</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, avl_demod_commoninternal.o(i.AVL_patch_read32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AVL_patch_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[c3]"></a>Add32To64_Demod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, avl_demod_commoninternal.o(i.Add32To64_Demod))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBER_Demod
</UL>

<P><STRONG><a name="[143]"></a>AddScaled32To64_Demod</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, avl_demod_commoninternal.o(i.AddScaled32To64_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddScaled32To64_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply32_Demod
</UL>

<P><STRONG><a name="[23]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>Chunk16_Demod</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, avl_demod_commoninternal.o(i.Chunk16_Demod))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write16_Demod
</UL>

<P><STRONG><a name="[133]"></a>Chunk32_Demod</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, avl_demod_commoninternal.o(i.Chunk32_Demod))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
</UL>

<P><STRONG><a name="[b8]"></a>ChunkAddr_Demod</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, avl_demod_commoninternal.o(i.ChunkAddr_Demod))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write_Demod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write16_Demod
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read_Demod
</UL>

<P><STRONG><a name="[7e]"></a>DVBTx_GetLockStatus_Demod</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, avl_demod_dvbtx.o(i.DVBTx_GetLockStatus_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DVBTx_GetLockStatus_Demod &rArr; II2C_Read8_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avl_demod_commoninternal.o(i.SetInternalFunc_Demod)
</UL>
<P><STRONG><a name="[81]"></a>DVBTx_GetPrePostBER_Demod</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, avl_demod_dvbtx.o(i.DVBTx_GetPrePostBER_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DVBTx_GetPrePostBER_Demod &rArr; II2C_Read32_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read32_Demod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avl_demod_commoninternal.o(i.SetInternalFunc_Demod)
</UL>
<P><STRONG><a name="[7f]"></a>DVBTx_GetSNR_Demod</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, avl_demod_dvbtx.o(i.DVBTx_GetSNR_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DVBTx_GetSNR_Demod &rArr; II2C_Read16_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read16_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI_DVBT2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI_DVBT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avl_demod_commoninternal.o(i.SetInternalFunc_Demod)
</UL>
<P><STRONG><a name="[80]"></a>DVBTx_GetSignalQuality_Demod</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, avl_demod_dvbtx.o(i.DVBTx_GetSignalQuality_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = DVBTx_GetSignalQuality_Demod &rArr; IRx_GetSQI &rArr; IRx_GetSQI_DVBT &rArr; GetBER_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avl_demod_commoninternal.o(i.SetInternalFunc_Demod)
</UL>
<P><STRONG><a name="[7d]"></a>DVBTx_Initialize_Demod</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, avl_demod_dvbtx.o(i.DVBTx_Initialize_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DVBTx_Initialize_Demod &rArr; DVBTx_SetIFFrequency_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableTCAGC_Demod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableTCAGC_Demod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_SetIFInputPath_Demod
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_SetIFFrequency_Demod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avl_demod_commoninternal.o(i.SetInternalFunc_Demod)
</UL>
<P><STRONG><a name="[99]"></a>DVBTx_SetBandWidth_Demod</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, avl_demod_dvbtx.o(i.DVBTx_SetBandWidth_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DVBTx_SetBandWidth_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBTxChannelScan
</UL>

<P><STRONG><a name="[bb]"></a>DVBTx_SetIFFrequency_Demod</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, avl_demod_dvbtx.o(i.DVBTx_SetIFFrequency_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DVBTx_SetIFFrequency_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_Initialize_Demod
</UL>

<P><STRONG><a name="[bc]"></a>DVBTx_SetIFInputPath_Demod</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, avl_demod_dvbtx.o(i.DVBTx_SetIFInputPath_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DVBTx_SetIFInputPath_Demod &rArr; II2C_Write8_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_Initialize_Demod
</UL>

<P><STRONG><a name="[12c]"></a>DeChunk16_Demod</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, avl_demod_commoninternal.o(i.DeChunk16_Demod))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read16_Demod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
</UL>

<P><STRONG><a name="[12f]"></a>DeChunk32_Demod</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, avl_demod_commoninternal.o(i.DeChunk32_Demod))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read32_Demod
</UL>

<P><STRONG><a name="[26]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>DisableTCAGC_Demod</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.DisableTCAGC_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DisableTCAGC_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_Initialize_Demod
</UL>

<P><STRONG><a name="[c4]"></a>Divide64_Demod</STRONG> (Thumb, 116 bytes, Stack size 36 bytes, avl_demod_commoninternal.o(i.Divide64_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Divide64_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBER_Demod
</UL>

<P><STRONG><a name="[bd]"></a>EnableTCAGC_Demod</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.EnableTCAGC_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EnableTCAGC_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_Initialize_Demod
</UL>

<P><STRONG><a name="[b3]"></a>EnableTSOutput_Demod</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.EnableTSOutput_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EnableTSOutput_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[bf]"></a>ErrorStatMode_Demod</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, avl_demod_commoninternal.o(i.ErrorStatMode_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ErrorStatMode_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply32_Demod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitErrorStat_Demod
</UL>

<P><STRONG><a name="[10d]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c1]"></a>GetBER_Demod</STRONG> (Thumb, 812 bytes, Stack size 48 bytes, avl_demod_commoninternal.o(i.GetBER_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GetBER_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply32_Demod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read32_Demod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide64_Demod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add32To64_Demod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_GetLockStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI_DVBT2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI_DVBT
</UL>

<P><STRONG><a name="[a0]"></a>GetMode_Demod</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, avl_demod_commoninternal.o(i.GetMode_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetMode_Demod &rArr; II2C_Read32_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[c7]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_tunerreset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_mainreset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_demodreset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_delay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>

<P><STRONG><a name="[cd]"></a>HAL_GPIO_Init</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_tunerreset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_mainreset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_demodreset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_gettick
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_wait_flag
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[c9]"></a>HAL_I2C_Init</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ce]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[d3]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[cf]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16a]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ConnectCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[dc]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[e0]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[e2]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[e4]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[e7]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[ea]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[eb]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1342 bytes, Stack size 48 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = HAL_PCD_IRQHandler &rArr; PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>HAL_PCD_Init</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ResumeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[114]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
</UL>

<P><STRONG><a name="[116]"></a>HAL_PCD_Start</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[f7]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fb]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[11e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1152 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11f]"></a>HAL_RTC_Init</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[123]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[125]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_UART_MspInit</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_UART_Transmit</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[21]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>IBase_CheckChipReady_Demod</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, avl_demod_commoninternal.o(i.IBase_CheckChipReady_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IBase_CheckChipReady_Demod &rArr; II2C_Read32_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[12a]"></a>IBase_GetRxOPStatus_Demod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.IBase_GetRxOPStatus_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IBase_GetRxOPStatus_Demod &rArr; II2C_Read16_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read16_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
</UL>

<P><STRONG><a name="[92]"></a>IBase_SendRxOPWait_Demod</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, avl_demod_commoninternal.o(i.IBase_SendRxOPWait_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_Delay
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_WaitSemaphore
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_ReleaseSemaphore
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write16_Demod
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_GetRxOPStatus_Demod
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeChunk16_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_Initialize_Demod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBSxAutoLock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBCAutoLock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_ISDBTAutoLock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBTxChannelScan
</UL>

<P><STRONG><a name="[97]"></a>II2C_Read16_Demod</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, avl_demod_commoninternal.o(i.II2C_Read16_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = II2C_Read16_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read_Demod
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeChunk16_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBSx_GetFunctionalMode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_GetSNR_Demod
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_GetRxOPStatus_Demod
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBTxGetModulationInfo
</UL>

<P><STRONG><a name="[b7]"></a>II2C_Read32_Demod</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, avl_demod_commoninternal.o(i.II2C_Read32_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = II2C_Read32_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeChunk32_Demod
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_CheckChipReady_Demod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMode_Demod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_GetPrePostBER_Demod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPER_Demod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBER_Demod
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerI2C_Initialize_Demod
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI
</UL>

<P><STRONG><a name="[9c]"></a>II2C_Read8_Demod</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, avl_demod_commoninternal.o(i.II2C_Read8_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = II2C_Read8_Demod &rArr; II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_GetLockStatus_Demod
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI_DVBT
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBTxGetModulationInfo
</UL>

<P><STRONG><a name="[12e]"></a>II2C_Read_Demod</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, avl_demod_commoninternal.o(i.II2C_Read_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = II2C_Read_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChunkAddr_Demod
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_I2C_Write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_I2C_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_WaitSemaphore
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_ReleaseSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read32_Demod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read16_Demod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read8_Demod
</UL>

<P><STRONG><a name="[96]"></a>II2C_Write16_Demod</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, avl_demod_commoninternal.o(i.II2C_Write16_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChunkAddr_Demod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write_Demod
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chunk16_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBSxAutoLock
</UL>

<P><STRONG><a name="[93]"></a>II2C_Write32_Demod</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, avl_demod_commoninternal.o(i.II2C_Write32_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChunkAddr_Demod
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chunk32_Demod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSMode_Demod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGPIOStatus_Demod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableTSOutput_Demod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBSxAutoLock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBCAutoLock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_Initialize_Demod
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPLL0_Demod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPER_Demod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBER_Demod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorStatMode_Demod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableTCAGC_Demod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableTCAGC_Demod
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerI2C_Initialize_Demod
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISDBT_SetIFFrequency_Demod
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_SetIFFrequency_Demod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_SetBandWidth_Demod
</UL>

<P><STRONG><a name="[9a]"></a>II2C_Write8_Demod</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, avl_demod_commoninternal.o(i.II2C_Write8_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = II2C_Write8_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChunkAddr_Demod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSParallelOrder_Demod
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSPacketLen_Demod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSMode_Demod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSErrorPola_Demod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_Initialize_Demod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSValidPola_Demod
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSSerialSyncPulse_Demod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSSerialPin_Demod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSSerialOrder_Demod
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTSParallelPhase_Demod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_SetIFInputPath_Demod
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBTxChannelScan
</UL>

<P><STRONG><a name="[b9]"></a>II2C_Write_Demod</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, avl_demod_commoninternal.o(i.II2C_Write_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChunkAddr_Demod
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_I2C_Write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_WaitSemaphore
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_ReleaseSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_ParseFwPatch_v0
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write16_Demod
</UL>

<P><STRONG><a name="[ba]"></a>IRx_GetSQI</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, avl_demod_dvbtx.o(i.IRx_GetSQI))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = IRx_GetSQI &rArr; IRx_GetSQI_DVBT &rArr; GetBER_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read32_Demod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_GetLockStatus_Demod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read8_Demod
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI_DVBT2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI_DVBT
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_GetSignalQuality_Demod
</UL>

<P><STRONG><a name="[134]"></a>IRx_GetSQI_DVBT</STRONG> (Thumb, 514 bytes, Stack size 112 bytes, avl_demod_dvbtx.o(i.IRx_GetSQI_DVBT))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = IRx_GetSQI_DVBT &rArr; GetBER_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_GetSNR_Demod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read8_Demod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBER_Demod
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBTxGetModulationInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI
</UL>

<P><STRONG><a name="[135]"></a>IRx_GetSQI_DVBT2</STRONG> (Thumb, 376 bytes, Stack size 88 bytes, avl_demod_dvbtx.o(i.IRx_GetSQI_DVBT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IRx_GetSQI_DVBT2 &rArr; GetBER_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVBTx_GetSNR_Demod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBER_Demod
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBTxGetModulationInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRx_GetSQI
</UL>

<P><STRONG><a name="[a7]"></a>IRx_Initialize_Demod</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.IRx_Initialize_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IRx_Initialize_Demod &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBase_SendRxOPWait_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[9e]"></a>ISDBT_SetIFFrequency_Demod</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, avl_demod_isdbt.o(i.ISDBT_SetIFFrequency_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ISDBT_SetIFFrequency_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_ISDBTAutoLock
</UL>

<P><STRONG><a name="[b5]"></a>InitErrorStat_Demod</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, avl_demod_commoninternal.o(i.InitErrorStat_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = InitErrorStat_Demod &rArr; ErrorStatMode_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPER_Demod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorStatMode_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[137]"></a>MX_GPIO_Init</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>MX_I2C1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>MX_RTC_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>MX_SPI1_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>MX_SPI3_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi.o(i.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_RegisterInterface
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>Multiply32_Demod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.Multiply32_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Multiply32_Demod &rArr; AddScaled32To64_Demod
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddScaled32To64_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBER_Demod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorStatMode_Demod
</UL>

<P><STRONG><a name="[144]"></a>MxL608_Ctrl_ProgramRegisters</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, mxl608_tunercfg.o(i.MxL608_Ctrl_ProgramRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MxL608_Ctrl_ProgramRegisters &rArr; MxLWare608_OEM_WriteRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_WriteRegister
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_CfgTunerMode
</UL>

<P><STRONG><a name="[147]"></a>MxL608_Ctrl_SetRfFreqLutTblReg</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, mxl608_tunercfg.o(i.MxL608_Ctrl_SetRfFreqLutTblReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MxL608_Ctrl_SetRfFreqLutTblReg &rArr; MxLWare608_OEM_WriteRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_CfgTunerChanTune
</UL>

<P><STRONG><a name="[148]"></a>MxLWare608_API_CfgTunerChanTune</STRONG> (Thumb, 722 bytes, Stack size 56 bytes, mxl608_tunerapi.o(i.MxLWare608_API_CfgTunerChanTune))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MxLWare608_API_CfgTunerChanTune &rArr; MxL608_Ctrl_SetRfFreqLutTblReg &rArr; MxLWare608_OEM_WriteRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxL608_Ctrl_SetRfFreqLutTblReg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_WriteRegister
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_ReadRegister
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxl608_lock
</UL>

<P><STRONG><a name="[14a]"></a>MxLWare608_API_CfgTunerMode</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, mxl608_tunerapi.o(i.MxLWare608_API_CfgTunerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MxLWare608_API_CfgTunerMode &rArr; MxL608_Ctrl_ProgramRegisters &rArr; MxLWare608_OEM_WriteRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxL608_Ctrl_ProgramRegisters
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_WriteRegister
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxl608_lock
</UL>

<P><STRONG><a name="[14b]"></a>MxLWare608_API_ReqTunerLockStatus</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, mxl608_tunerapi.o(i.MxLWare608_API_ReqTunerLockStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MxLWare608_API_ReqTunerLockStatus &rArr; MxLWare608_OEM_ReadRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxl608_getstatus
</UL>

<P><STRONG><a name="[145]"></a>MxLWare608_OEM_ReadRegister</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, mxl608_oem_drv.o(i.MxLWare608_OEM_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MxLWare608_OEM_ReadRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_I2C_Write
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxL608_Ctrl_ProgramRegisters
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_ReqTunerLockStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_CfgTunerChanTune
</UL>

<P><STRONG><a name="[1ad]"></a>MxLWare608_OEM_SetActiveI2C</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mxl608_oem_drv.o(i.MxLWare608_OEM_SetActiveI2C))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxl608_lock
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxl608_getstatus
</UL>

<P><STRONG><a name="[149]"></a>MxLWare608_OEM_Sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mxl608_oem_drv.o(i.MxLWare608_OEM_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MxLWare608_OEM_Sleep &rArr; vatek_system_delay &rArr; vatek_porting_system_delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_CfgTunerMode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_CfgTunerChanTune
</UL>

<P><STRONG><a name="[146]"></a>MxLWare608_OEM_WriteRegister</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, mxl608_oem_drv.o(i.MxLWare608_OEM_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MxLWare608_OEM_WriteRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxL608_Ctrl_SetRfFreqLutTblReg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxL608_Ctrl_ProgramRegisters
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_CfgTunerMode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_CfgTunerChanTune
</UL>

<P><STRONG><a name="[20]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[136]"></a>ResetPER_Demod</STRONG> (Thumb, 434 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.ResetPER_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ResetPER_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitErrorStat_Demod
</UL>

<P><STRONG><a name="[25]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>SetGPIOStatus_Demod</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.SetGPIOStatus_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetGPIOStatus_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[a6]"></a>SetInternalFunc_Demod</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, avl_demod_commoninternal.o(i.SetInternalFunc_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetInternalFunc_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[14f]"></a>SetPLL0_Demod</STRONG> (Thumb, 1354 bytes, Stack size 24 bytes, avl_demod_commoninternal.o(i.SetPLL0_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SetPLL0_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPLL_Demod
</UL>

<P><STRONG><a name="[a1]"></a>SetPLL_Demod</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.SetPLL_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SetPLL_Demod &rArr; SetPLL0_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPLL0_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[ac]"></a>SetTSErrorBit_Demod</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, avl_demod_commoninternal.o(i.SetTSErrorBit_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetTSErrorBit_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[ad]"></a>SetTSErrorPola_Demod</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.SetTSErrorPola_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetTSErrorPola_Demod &rArr; II2C_Write8_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[a8]"></a>SetTSMode_Demod</STRONG> (Thumb, 754 bytes, Stack size 24 bytes, avl_demod_commoninternal.o(i.SetTSMode_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SetTSMode_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[af]"></a>SetTSPacketLen_Demod</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.SetTSPacketLen_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetTSPacketLen_Demod &rArr; II2C_Write8_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[b0]"></a>SetTSParallelOrder_Demod</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.SetTSParallelOrder_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetTSParallelOrder_Demod &rArr; II2C_Write8_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[b1]"></a>SetTSParallelPhase_Demod</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.SetTSParallelPhase_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetTSParallelPhase_Demod &rArr; II2C_Write8_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[aa]"></a>SetTSSerialOrder_Demod</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.SetTSSerialOrder_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetTSSerialOrder_Demod &rArr; II2C_Write8_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[a9]"></a>SetTSSerialPin_Demod</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.SetTSSerialPin_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetTSSerialPin_Demod &rArr; II2C_Write8_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[ab]"></a>SetTSSerialSyncPulse_Demod</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.SetTSSerialSyncPulse_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetTSSerialSyncPulse_Demod &rArr; II2C_Write8_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[ae]"></a>SetTSValidPola_Demod</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avl_demod_commoninternal.o(i.SetTSValidPola_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetTSValidPola_Demod &rArr; II2C_Write8_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write8_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[28]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>SystemClock_Config</STRONG> (Thumb, 202 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>TunerI2C_Initialize_Demod</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, avl_demod_commoninternal.o(i.TunerI2C_Initialize_Demod))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TunerI2C_Initialize_Demod &rArr; II2C_Write32_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Write32_Demod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II2C_Read32_Demod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
</UL>

<P><STRONG><a name="[141]"></a>USBD_CUSTOM_HID_RegisterInterface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[175]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[15c]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[15d]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[159]"></a>USBD_CtlError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[158]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
</UL>

<P><STRONG><a name="[160]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[157]"></a>USBD_CtlSendData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[15b]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[10]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[161]"></a>USBD_GetString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[168]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[13f]"></a>USBD_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[167]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[153]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DeInit
</UL>

<P><STRONG><a name="[d9]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[db]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[d7]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[dd]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[166]"></a>USBD_LL_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[177]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[102]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[103]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[155]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
</UL>

<P><STRONG><a name="[152]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DataOut
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[10f]"></a>USBD_LL_Reset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[110]"></a>USBD_LL_Resume</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[111]"></a>USBD_LL_SOF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[10e]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[16c]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[115]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[15f]"></a>USBD_LL_StallEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[171]"></a>USBD_LL_Start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[119]"></a>USBD_LL_Suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[15e]"></a>USBD_LL_Transmit</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[16d]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[140]"></a>USBD_RegisterClass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[169]"></a>USBD_RunTestMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[174]"></a>USBD_SetClassConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[142]"></a>USBD_Start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[16e]"></a>USBD_StdDevReq</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[170]"></a>USBD_StdEPReq</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[16f]"></a>USBD_StdItfReq</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[e3]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[f9]"></a>USB_ActivateSetup</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>USB_CoreInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[df]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[117]"></a>USB_DevConnect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[10b]"></a>USB_DevDisconnect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[10a]"></a>USB_DevInit</STRONG> (Thumb, 482 bytes, Stack size 36 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[106]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[e5]"></a>USB_EP0StartXfer</STRONG> (Thumb, 468 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[e9]"></a>USB_EP0_OutStart</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>USB_EPClearStall</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[e8]"></a>USB_EPSetStall</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[e6]"></a>USB_EPStartXfer</STRONG> (Thumb, 832 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[118]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[17a]"></a>USB_FlushRxFifo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[f8]"></a>USB_FlushTxFifo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>USB_GetDevSpeed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>USB_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadDevOutEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>USB_ReadInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>USB_ReadPacket</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>USB_SetCurrentMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[113]"></a>USB_SetDevAddress</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[179]"></a>USB_SetDevSpeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[fc]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_SetTurnaroundTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetTurnaroundTime
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>USB_WritePacket</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[24]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1eb]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[180]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_rule_setparm
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_pure_setparm
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_iso13818_setparm
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_default_setparm
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83c_setparm
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83b_setparm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83a_setparm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_isdbt_setparm
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dvbt_setparm
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dvbt2_setparm
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dtmb_setparm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_base_setparm
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_atsc_setparm
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsmux_setparm
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_stop
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_start
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_reset
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_start
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demod_i2c_bypass
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxl608_lock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_lock
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_getstatus
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_isdbt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbtx
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbsx
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_default_cli_help
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_default_cli_dump_reg_one
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_default_cli_dump_reg_all
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_stop
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_statusmsg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_pure_psitable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_allprogram
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_lockfreq
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_setmodulator_parm
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmdline_help
</UL>

<P><STRONG><a name="[154]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_create
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DeInit
</UL>

<P><STRONG><a name="[156]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_i2c_create
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_create
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_rf_create
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_pure_psitable
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
</UL>

<P><STRONG><a name="[1ec]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ed]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ee]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[196]"></a>avl68xx_getstatus</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, demod_avl68xx.o(i.avl68xx_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = avl68xx_getstatus &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_GetLockStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_SetActiveI2C
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_demod_getstatus
</UL>

<P><STRONG><a name="[198]"></a>avl68xx_lock</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, demod_avl68xx.o(i.avl68xx_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = avl68xx_lock &rArr; AVL_Demod_SetMode &rArr; AVL_ParseFwPatch_v0 &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_SetMode
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_isdbt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbtx
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbsx
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_SetActiveI2C
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_demod_lock
</UL>

<P><STRONG><a name="[82]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[7a]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; sample_tf_play_allprogram &rArr; _sample_tf_play_allprogram &rArr; _sample_tf_pure_psitable &rArr; vatek_transform_psitable_register &rArr; vatek_psitable_register &rArr; psitable_register_put &rArr; vatek_hms_write_halbuf &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_play_allprogram
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1ac]"></a>mxl608_getstatus</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tuner_mxl608.o(i.mxl608_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mxl608_getstatus &rArr; MxLWare608_API_ReqTunerLockStatus &rArr; MxLWare608_OEM_ReadRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_SetActiveI2C
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_ReqTunerLockStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tuner_getstatus
</UL>

<P><STRONG><a name="[1ae]"></a>mxl608_lock</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, tuner_mxl608.o(i.mxl608_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mxl608_lock &rArr; MxLWare608_API_CfgTunerChanTune &rArr; MxL608_Ctrl_SetRfFreqLutTblReg &rArr; MxLWare608_OEM_WriteRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_delay
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_SetActiveI2C
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_CfgTunerMode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_API_CfgTunerChanTune
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tuner_lock
</UL>

<P><STRONG><a name="[1b4]"></a>r2_viavatek_create</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rf_r2_via_vatek.o(i.r2_viavatek_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = r2_viavatek_create &rArr; vatek_hms_create &rArr; vatek_system_i2c_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_create
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_rf_create
</UL>

<P><STRONG><a name="[1b7]"></a>r2_viavatek_getstatus</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rf_r2_via_vatek.o(i.r2_viavatek_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = r2_viavatek_getstatus &rArr; vatek_hms_read_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_stop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_start
</UL>

<P><STRONG><a name="[1b8]"></a>r2_viavatek_start</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, rf_r2_via_vatek.o(i.r2_viavatek_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = r2_viavatek_start &rArr; r2_viavatek_ctrl &rArr; r2_viavatek_cmd &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_getstatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_ctrl
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_rf_start
</UL>

<P><STRONG><a name="[1b9]"></a>r2_viavatek_stop</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rf_r2_via_vatek.o(i.r2_viavatek_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = r2_viavatek_stop &rArr; r2_viavatek_ctrl &rArr; r2_viavatek_cmd &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_getstatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_rf_stop
</UL>

<P><STRONG><a name="[1a0]"></a>sample_tf_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, vatek_sample_transform.o(i.sample_tf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sample_tf_init &rArr; vatek_rf_create &rArr; r2_viavatek_create &rArr; vatek_hms_create &rArr; vatek_system_i2c_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_create
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_rf_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmdline_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a1]"></a>sample_tf_play_allprogram</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vatek_sample_transform.o(i.sample_tf_play_allprogram))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sample_tf_play_allprogram &rArr; _sample_tf_play_allprogram &rArr; _sample_tf_pure_psitable &rArr; vatek_transform_psitable_register &rArr; vatek_psitable_register &rArr; psitable_register_put &rArr; vatek_hms_write_halbuf &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_allprogram
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>sample_tf_statusmsg</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, vatek_sample_transform.o(i.sample_tf_statusmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sample_tf_statusmsg &rArr; vatek_transform_bcstatus &rArr; transform_getstatus &rArr; vatek_hms_read_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_chipstatus
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_bcstatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vatek_sample_transform.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>sample_tf_stop</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, vatek_sample_transform.o(i.sample_tf_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sample_tf_stop &rArr; vatek_rf_stop &rArr; r2_viavatek_stop &rArr; r2_viavatek_ctrl &rArr; r2_viavatek_cmd &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_stop
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_bcstatus
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_rf_stop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vatek_sample_transform.o(.data)
</UL>
<P><STRONG><a name="[1ba]"></a>uart_cmdline_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart_cmdline.o(i.uart_cmdline_init))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_init
</UL>

<P><STRONG><a name="[18c]"></a>vatek_demod_getstatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vatek_demod.o(i.vatek_demod_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vatek_demod_getstatus &rArr; avl68xx_getstatus &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_getstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_lockfreq
</UL>

<P><STRONG><a name="[18b]"></a>vatek_demod_lock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vatek_demod.o(i.vatek_demod_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = vatek_demod_lock &rArr; avl68xx_lock &rArr; AVL_Demod_SetMode &rArr; AVL_ParseFwPatch_v0 &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_lockfreq
</UL>

<P><STRONG><a name="[1b5]"></a>vatek_hms_create</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, vatek_hms.o(i.vatek_hms_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vatek_hms_create &rArr; vatek_system_i2c_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_i2c_create
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_create
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_create
</UL>

<P><STRONG><a name="[1c4]"></a>vatek_hms_issystemidle</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, vatek_hms.o(i.vatek_hms_issystemidle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vatek_hms_issystemidle &rArr; vatek_hms_read_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsp_setinputparm_ts
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsmux_setparm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_psitable_register
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_reset
</UL>

<P><STRONG><a name="[1b3]"></a>vatek_hms_read_hal</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, vatek_hms.o(i.vatek_hms_read_hal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vatek_hms_read_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hms_i2c_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hms_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_rule_setparm
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_pure_setparm
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_default_setparm
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_issystemidle
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_chipstatus
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_getstatus
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_ctrl
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_getstatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_ctrl
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_cmd
</UL>

<P><STRONG><a name="[184]"></a>vatek_hms_read_reg</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, vatek_hms.o(i.vatek_hms_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vatek_hms_read_reg &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hms_i2c_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hms_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_default_cli_dump_reg_one
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_default_cli_dump_reg_all
</UL>

<P><STRONG><a name="[1c3]"></a>vatek_hms_reset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vatek_hms.o(i.vatek_hms_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vatek_hms_reset &rArr; vatek_system_reset &rArr; vatek_porting_system_tunerreset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_reset
</UL>

<P><STRONG><a name="[1a3]"></a>vatek_hms_write_hal</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, vatek_hms.o(i.vatek_hms_write_hal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hms_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_transform_setparm
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_rule_setparm
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_pure_setparm
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_iso13818_setparm
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_default_setparm
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psitable_register_put
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psitable_register_end
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83c_setparm
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83b_setparm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83a_setparm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_isdbt_setparm
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dvbt_setparm
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dvbt2_setparm
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dtmb_setparm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_base_setparm
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_atsc_setparm
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_halbuf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsp_setinputparm_ts
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsp_setfilterparm
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_ctrl
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_start
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_ctrl
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_cmd
</UL>

<P><STRONG><a name="[1b1]"></a>vatek_hms_write_halbuf</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, vatek_hms.o(i.vatek_hms_write_halbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vatek_hms_write_halbuf &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psitable_register_put
</UL>

<P><STRONG><a name="[1ce]"></a>vatek_modulator_setparm</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, vatek_modulator.o(i.vatek_modulator_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vatek_modulator_setparm &rArr; modulator_base_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83c_setparm
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83b_setparm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83a_setparm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_isdbt_setparm
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dvbt_setparm
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dvbt2_setparm
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dtmb_setparm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_base_setparm
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_atsc_setparm
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_issystemidle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_modulator_setparm
</UL>

<P><STRONG><a name="[86]"></a>vatek_porting_i2c_read</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, vatek_porting_i2c.o(i.vatek_porting_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vatek_porting_i2c_read &rArr; ll_i2c_wait_flag_set &rArr; ll_i2c_wait_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_wait_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vatek_system.o(i.vatek_system_i2c_create)
</UL>
<P><STRONG><a name="[83]"></a>vatek_porting_i2c_set_speed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vatek_porting_i2c.o(i.vatek_porting_i2c_set_speed))
<BR>[Address Reference Count : 1]<UL><LI> vatek_system.o(i.vatek_system_i2c_create)
</UL>
<P><STRONG><a name="[84]"></a>vatek_porting_i2c_start</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, vatek_porting_i2c.o(i.vatek_porting_i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vatek_porting_i2c_start &rArr; ll_i2c_set_device_address &rArr; ll_i2c_wait_flag_set &rArr; ll_i2c_wait_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_set_device_address
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_send_start
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_check_busy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vatek_system.o(i.vatek_system_i2c_create)
</UL>
<P><STRONG><a name="[87]"></a>vatek_porting_i2c_stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vatek_porting_i2c.o(i.vatek_porting_i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vatek_porting_i2c_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vatek_system.o(i.vatek_system_i2c_create)
</UL>
<P><STRONG><a name="[85]"></a>vatek_porting_i2c_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, vatek_porting_i2c.o(i.vatek_porting_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vatek_porting_i2c_write &rArr; ll_i2c_wait_flag_set &rArr; ll_i2c_wait_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_wait_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vatek_system.o(i.vatek_system_i2c_create)
</UL>
<P><STRONG><a name="[1cf]"></a>vatek_porting_system_delay</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vatek_porting_system.o(i.vatek_porting_system_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vatek_porting_system_delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_delay
</UL>

<P><STRONG><a name="[1d0]"></a>vatek_porting_system_demodreset</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, vatek_porting_system.o(i.vatek_porting_system_demodreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vatek_porting_system_demodreset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_reset
</UL>

<P><STRONG><a name="[1d1]"></a>vatek_porting_system_gettick</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vatek_porting_system.o(i.vatek_porting_system_gettick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vatek_porting_system_gettick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
</UL>

<P><STRONG><a name="[1d2]"></a>vatek_porting_system_mainreset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, vatek_porting_system.o(i.vatek_porting_system_mainreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vatek_porting_system_mainreset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_reset
</UL>

<P><STRONG><a name="[1d6]"></a>vatek_porting_system_phyreset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vatek_porting_system.o(i.vatek_porting_system_phyreset))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_reset
</UL>

<P><STRONG><a name="[1d7]"></a>vatek_porting_system_rfreset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vatek_porting_system.o(i.vatek_porting_system_rfreset))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_reset
</UL>

<P><STRONG><a name="[1d3]"></a>vatek_porting_system_tunerreset</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, vatek_porting_system.o(i.vatek_porting_system_tunerreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vatek_porting_system_tunerreset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_reset
</UL>

<P><STRONG><a name="[1d4]"></a>vatek_psitable_register</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vatek_psitable.o(i.vatek_psitable_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vatek_psitable_register &rArr; psitable_register_put &rArr; vatek_hms_write_halbuf &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psitable_register_start
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psitable_register_put
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psitable_register_end
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_issystemidle
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_psitable_register
</UL>

<P><STRONG><a name="[1bc]"></a>vatek_rf_create</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, vatek_rf.o(i.vatek_rf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vatek_rf_create &rArr; r2_viavatek_create &rArr; vatek_hms_create &rArr; vatek_system_i2c_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_delay
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_create
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_init
</UL>

<P><STRONG><a name="[190]"></a>vatek_rf_start</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vatek_rf.o(i.vatek_rf_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vatek_rf_start &rArr; r2_viavatek_start &rArr; r2_viavatek_ctrl &rArr; r2_viavatek_cmd &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_allprogram
</UL>

<P><STRONG><a name="[1be]"></a>vatek_rf_stop</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vatek_rf.o(i.vatek_rf_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vatek_rf_stop &rArr; r2_viavatek_stop &rArr; r2_viavatek_ctrl &rArr; r2_viavatek_cmd &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_stop
</UL>

<P><STRONG><a name="[b6]"></a>vatek_system_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vatek_system.o(i.vatek_system_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vatek_system_delay &rArr; vatek_porting_system_delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_start
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_reset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_ctrl
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_IBSP_Delay
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_rf_create
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxl608_lock
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_Sleep
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_lockfreq
</UL>

<P><STRONG><a name="[17f]"></a>vatek_system_gettick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vatek_system.o(i.vatek_system_gettick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vatek_system_gettick &rArr; vatek_porting_system_gettick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_gettick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_rule_setparm
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_pure_setparm
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_iso13818_setparm
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_default_setparm
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83c_setparm
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83b_setparm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_j83a_setparm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_isdbt_setparm
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dvbt_setparm
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dvbt2_setparm
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_dtmb_setparm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_base_setparm
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulator_atsc_setparm
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsmux_setparm
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_stop
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_start
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_reset
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_start
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demod_i2c_bypass
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxl608_lock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_lock
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_getstatus
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_isdbt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbtx
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbsx
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avl68xx_lockfreq_dvbc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_lockfreq
</UL>

<P><STRONG><a name="[1ca]"></a>vatek_system_i2c_create</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, vatek_system.o(i.vatek_system_i2c_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vatek_system_i2c_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_create
</UL>

<P><STRONG><a name="[1cd]"></a>vatek_system_reset</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, vatek_system.o(i.vatek_system_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vatek_system_reset &rArr; vatek_porting_system_tunerreset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_tunerreset
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_rfreset
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_phyreset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_mainreset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_system_demodreset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_reset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_rf_create
</UL>

<P><STRONG><a name="[193]"></a>vatek_transform_bcstatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vatek_transform.o(i.vatek_transform_bcstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vatek_transform_bcstatus &rArr; transform_getstatus &rArr; vatek_hms_read_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_getstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_stop
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_statusmsg
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
</UL>

<P><STRONG><a name="[1bd]"></a>vatek_transform_chipstatus</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, vatek_transform.o(i.vatek_transform_chipstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vatek_transform_chipstatus &rArr; vatek_hms_read_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_statusmsg
</UL>

<P><STRONG><a name="[1bb]"></a>vatek_transform_create</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, vatek_transform.o(i.vatek_transform_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vatek_transform_create &rArr; vatek_hms_create &rArr; vatek_system_i2c_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_create
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_init
</UL>

<P><STRONG><a name="[188]"></a>vatek_transform_modulator_setparm</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, vatek_transform.o(i.vatek_transform_modulator_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vatek_transform_modulator_setparm &rArr; vatek_modulator_setparm &rArr; modulator_base_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_setmodulator_parm
</UL>

<P><STRONG><a name="[195]"></a>vatek_transform_psitable_register</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vatek_transform.o(i.vatek_transform_psitable_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vatek_transform_psitable_register &rArr; vatek_psitable_register &rArr; psitable_register_put &rArr; vatek_hms_write_halbuf &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_psitable_register
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_pure_psitable
</UL>

<P><STRONG><a name="[191]"></a>vatek_transform_start</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, vatek_transform.o(i.vatek_transform_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vatek_transform_start &rArr; transform_getstatus &rArr; vatek_hms_read_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_delay
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_getstatus
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_ctrl
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_allprogram
</UL>

<P><STRONG><a name="[1bf]"></a>vatek_transform_stop</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, vatek_transform.o(i.vatek_transform_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vatek_transform_stop &rArr; transform_reset &rArr; vatek_hms_reset &rArr; vatek_system_reset &rArr; vatek_porting_system_tunerreset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_reset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_ctrl
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_stop
</UL>

<P><STRONG><a name="[18e]"></a>vatek_transform_tsmux_setparm</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vatek_transform.o(i.vatek_transform_tsmux_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vatek_transform_tsmux_setparm &rArr; vatek_tsmux_setparm &rArr; tsmux_rule_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsmux_setparm
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_allprogram
</UL>

<P><STRONG><a name="[192]"></a>vatek_transform_tsp_setfilterparm</STRONG> (Thumb, 48 bytes, Stack size 120 bytes, vatek_transform.o(i.vatek_transform_tsp_setfilterparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vatek_transform_tsp_setfilterparm &rArr; vatek_tsp_setfilterparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsp_setfilterparm
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
</UL>

<P><STRONG><a name="[18d]"></a>vatek_transform_tsp_setinputparm_ts</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, vatek_transform.o(i.vatek_transform_tsp_setinputparm_ts))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vatek_transform_tsp_setinputparm_ts &rArr; vatek_tsp_setinputparm_ts &rArr; vatek_hms_issystemidle &rArr; vatek_hms_read_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsp_setinputparm_ts
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_allprogram
</UL>

<P><STRONG><a name="[1d8]"></a>vatek_tsmux_setparm</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, vatek_tsmux.o(i.vatek_tsmux_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vatek_tsmux_setparm &rArr; tsmux_rule_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_transform_setparm
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_rule_setparm
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_pure_setparm
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_iso13818_setparm
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsmux_default_setparm
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_issystemidle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_tsmux_setparm
</UL>

<P><STRONG><a name="[1d9]"></a>vatek_tsp_setfilterparm</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, vatek_tsp.o(i.vatek_tsp_setfilterparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vatek_tsp_setfilterparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_tsp_setfilterparm
</UL>

<P><STRONG><a name="[1da]"></a>vatek_tsp_setinputparm_ts</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, vatek_tsp.o(i.vatek_tsp_setinputparm_ts))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vatek_tsp_setinputparm_ts &rArr; vatek_hms_issystemidle &rArr; vatek_hms_read_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_issystemidle
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_tsp_setinputparm_ts
</UL>

<P><STRONG><a name="[18a]"></a>vatek_tuner_getstatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, vatek_tuner.o(i.vatek_tuner_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vatek_tuner_getstatus &rArr; mxl608_getstatus &rArr; MxLWare608_API_ReqTunerLockStatus &rArr; MxLWare608_OEM_ReadRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demod_i2c_bypass
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxl608_getstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_lockfreq
</UL>

<P><STRONG><a name="[189]"></a>vatek_tuner_lock</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, vatek_tuner.o(i.vatek_tuner_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vatek_tuner_lock &rArr; mxl608_lock &rArr; MxLWare608_API_CfgTunerChanTune &rArr; MxL608_Ctrl_SetRfFreqLutTblReg &rArr; MxLWare608_OEM_WriteRegister &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demod_i2c_bypass
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxl608_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_lockfreq
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c0]"></a>transform_ctrl</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, vatek_transform.o(i.transform_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = transform_ctrl &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_delay
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_stop
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_start
</UL>

<P><STRONG><a name="[1c1]"></a>transform_getstatus</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, vatek_transform.o(i.transform_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = transform_getstatus &rArr; vatek_hms_read_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_bcstatus
</UL>

<P><STRONG><a name="[1c2]"></a>transform_reset</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, vatek_transform.o(i.transform_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = transform_reset &rArr; vatek_hms_reset &rArr; vatek_system_reset &rArr; vatek_porting_system_tunerreset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_delay
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_reset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_issystemidle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_stop
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_create
</UL>

<P><STRONG><a name="[1cc]"></a>hms_i2c_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, vatek_hms.o(i.hms_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hms_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_reg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
</UL>

<P><STRONG><a name="[1cb]"></a>hms_i2c_write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, vatek_hms.o(i.hms_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hms_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_reg
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
</UL>

<P><STRONG><a name="[1a2]"></a>modulator_atsc_setparm</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, vatek_modulator.o(i.modulator_atsc_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = modulator_atsc_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
</UL>

<P><STRONG><a name="[1a4]"></a>modulator_base_setparm</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, vatek_modulator.o(i.modulator_base_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = modulator_base_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
</UL>

<P><STRONG><a name="[1a5]"></a>modulator_dtmb_setparm</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, vatek_modulator.o(i.modulator_dtmb_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = modulator_dtmb_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
</UL>

<P><STRONG><a name="[1a6]"></a>modulator_dvbt2_setparm</STRONG> (Thumb, 1654 bytes, Stack size 32 bytes, vatek_modulator.o(i.modulator_dvbt2_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = modulator_dvbt2_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
</UL>

<P><STRONG><a name="[1a7]"></a>modulator_dvbt_setparm</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, vatek_modulator.o(i.modulator_dvbt_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = modulator_dvbt_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
</UL>

<P><STRONG><a name="[1a8]"></a>modulator_isdbt_setparm</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, vatek_modulator.o(i.modulator_isdbt_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = modulator_isdbt_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
</UL>

<P><STRONG><a name="[1a9]"></a>modulator_j83a_setparm</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, vatek_modulator.o(i.modulator_j83a_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = modulator_j83a_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
</UL>

<P><STRONG><a name="[1aa]"></a>modulator_j83b_setparm</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, vatek_modulator.o(i.modulator_j83b_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = modulator_j83b_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
</UL>

<P><STRONG><a name="[1ab]"></a>modulator_j83c_setparm</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, vatek_modulator.o(i.modulator_j83c_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = modulator_j83c_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_modulator_setparm
</UL>

<P><STRONG><a name="[1af]"></a>psitable_register_end</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, vatek_psitable.o(i.psitable_register_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = psitable_register_end &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_psitable_register
</UL>

<P><STRONG><a name="[1b0]"></a>psitable_register_put</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, vatek_psitable.o(i.psitable_register_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = psitable_register_put &rArr; vatek_hms_write_halbuf &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_halbuf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_psitable_register
</UL>

<P><STRONG><a name="[1d5]"></a>psitable_register_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vatek_psitable.o(i.psitable_register_start))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_psitable_register
</UL>

<P><STRONG><a name="[1c5]"></a>tsmux_default_setparm</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, vatek_tsmux.o(i.tsmux_default_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tsmux_default_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsmux_setparm
</UL>

<P><STRONG><a name="[1c6]"></a>tsmux_iso13818_setparm</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, vatek_tsmux.o(i.tsmux_iso13818_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tsmux_iso13818_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsmux_setparm
</UL>

<P><STRONG><a name="[1c7]"></a>tsmux_pure_setparm</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, vatek_tsmux.o(i.tsmux_pure_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tsmux_pure_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsmux_setparm
</UL>

<P><STRONG><a name="[1c8]"></a>tsmux_rule_setparm</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, vatek_tsmux.o(i.tsmux_rule_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tsmux_rule_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsmux_setparm
</UL>

<P><STRONG><a name="[1c9]"></a>tsmux_transform_setparm</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, vatek_tsmux.o(i.tsmux_transform_setparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tsmux_transform_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tsmux_setparm
</UL>

<P><STRONG><a name="[14d]"></a>AVL_IBSP_I2C_Read</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mxl608_oem_drv.o(i.AVL_IBSP_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AVL_IBSP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_ReadRegister
</UL>

<P><STRONG><a name="[14c]"></a>AVL_IBSP_I2C_Write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mxl608_oem_drv.o(i.AVL_IBSP_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AVL_IBSP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_WriteRegister
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxLWare608_OEM_ReadRegister
</UL>

<P><STRONG><a name="[199]"></a>demod_i2c_bypass</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vatek_tuner.o(i.demod_i2c_bypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = demod_i2c_bypass &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tuner_lock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tuner_getstatus
</UL>

<P><STRONG><a name="[1b2]"></a>r2_viavatek_cmd</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, rf_r2_via_vatek.o(i.r2_viavatek_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = r2_viavatek_cmd &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_delay
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_ctrl
</UL>

<P><STRONG><a name="[1b6]"></a>r2_viavatek_ctrl</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rf_r2_via_vatek.o(i.r2_viavatek_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = r2_viavatek_ctrl &rArr; r2_viavatek_cmd &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_write_hal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_hal
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_stop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_viavatek_start
</UL>

<P><STRONG><a name="[17e]"></a>_avl68xx_lockfreq_dvbc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, demod_avl68xx.o(i._avl68xx_lockfreq_dvbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _avl68xx_lockfreq_dvbc &rArr; AVL_Demod_DVBCAutoLock &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBCAutoLock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_lock
</UL>

<P><STRONG><a name="[181]"></a>_avl68xx_lockfreq_dvbsx</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, demod_avl68xx.o(i._avl68xx_lockfreq_dvbsx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _avl68xx_lockfreq_dvbsx &rArr; AVL_Demod_DVBSxAutoLock &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBSxAutoLock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_lock
</UL>

<P><STRONG><a name="[182]"></a>_avl68xx_lockfreq_dvbtx</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, demod_avl68xx.o(i._avl68xx_lockfreq_dvbtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _avl68xx_lockfreq_dvbtx &rArr; AVL_Demod_DVBTxChannelScan &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_DVBTxChannelScan
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_lock
</UL>

<P><STRONG><a name="[183]"></a>_avl68xx_lockfreq_isdbt</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, demod_avl68xx.o(i._avl68xx_lockfreq_isdbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _avl68xx_lockfreq_isdbt &rArr; AVL_Demod_ISDBTAutoLock &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVL_Demod_ISDBTAutoLock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avl68xx_lock
</UL>

<P><STRONG><a name="[19a]"></a>ll_i2c_check_busy</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vatek_porting_i2c.o(i.ll_i2c_check_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ll_i2c_check_busy &rArr; ll_i2c_wait_flag_clr &rArr; ll_i2c_wait_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_wait_flag_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_i2c_start
</UL>

<P><STRONG><a name="[19c]"></a>ll_i2c_send_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vatek_porting_i2c.o(i.ll_i2c_send_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ll_i2c_send_start &rArr; ll_i2c_wait_flag_set &rArr; ll_i2c_wait_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_wait_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_i2c_start
</UL>

<P><STRONG><a name="[19e]"></a>ll_i2c_set_device_address</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, vatek_porting_i2c.o(i.ll_i2c_set_device_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ll_i2c_set_device_address &rArr; ll_i2c_wait_flag_set &rArr; ll_i2c_wait_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_wait_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_i2c_start
</UL>

<P><STRONG><a name="[19f]"></a>ll_i2c_wait_flag</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, vatek_porting_i2c.o(i.ll_i2c_wait_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ll_i2c_wait_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_wait_flag_set
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_wait_flag_clr
</UL>

<P><STRONG><a name="[19b]"></a>ll_i2c_wait_flag_clr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, vatek_porting_i2c.o(i.ll_i2c_wait_flag_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_i2c_wait_flag_clr &rArr; ll_i2c_wait_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_wait_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_check_busy
</UL>

<P><STRONG><a name="[19d]"></a>ll_i2c_wait_flag_set</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, vatek_porting_i2c.o(i.ll_i2c_wait_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_i2c_wait_flag_set &rArr; ll_i2c_wait_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_wait_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_i2c_write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_porting_i2c_read
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_set_device_address
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_i2c_send_start
</UL>

<P><STRONG><a name="[0]"></a>_cmdline_help</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, vatek_sample_transform.o(i._cmdline_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _cmdline_help &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vatek_sample_transform.o(.data)
</UL>
<P><STRONG><a name="[187]"></a>_sample_setmodulator_parm</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, vatek_sample_transform.o(i._sample_setmodulator_parm))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _sample_setmodulator_parm &rArr; vatek_transform_modulator_setparm &rArr; vatek_modulator_setparm &rArr; modulator_base_setparm &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_modulator_setparm
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_allprogram
</UL>

<P><STRONG><a name="[4]"></a>_sample_tf_lockfreq</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, vatek_sample_transform.o(i._sample_tf_lockfreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _sample_tf_lockfreq &rArr; vatek_demod_lock &rArr; avl68xx_lock &rArr; AVL_Demod_SetMode &rArr; AVL_ParseFwPatch_v0 &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_delay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tuner_lock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_tuner_getstatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_demod_lock
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_demod_getstatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vatek_sample_transform.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>_sample_tf_play_allprogram</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, vatek_sample_transform.o(i._sample_tf_play_allprogram))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _sample_tf_play_allprogram &rArr; _sample_tf_pure_psitable &rArr; vatek_transform_psitable_register &rArr; vatek_psitable_register &rArr; psitable_register_put &rArr; vatek_hms_write_halbuf &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_tsp_setinputparm_ts
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_tsmux_setparm
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_start
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_rf_start
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_pure_psitable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_setmodulator_parm
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_tf_play_allprogram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vatek_sample_transform.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>_sample_tf_play_program</STRONG> (Thumb, 444 bytes, Stack size 224 bytes, vatek_sample_transform.o(i._sample_tf_play_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = _sample_tf_play_program &rArr; _sample_tf_lockfreq &rArr; vatek_demod_lock &rArr; avl68xx_lock &rArr; AVL_Demod_SetMode &rArr; AVL_ParseFwPatch_v0 &rArr; IBase_SendRxOPWait_Demod &rArr; II2C_Write16_Demod &rArr; II2C_Write_Demod &rArr; AVL_IBSP_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_system_gettick
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_tsp_setinputparm_ts
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_tsp_setfilterparm
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_tsmux_setparm
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_bcstatus
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_rf_start
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_pure_psitable
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_lockfreq
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_setmodulator_parm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vatek_sample_transform.o(.data)
</UL>
<P><STRONG><a name="[18f]"></a>_sample_tf_pure_psitable</STRONG> (Thumb, 162 bytes, Stack size 208 bytes, vatek_sample_transform.o(i._sample_tf_pure_psitable))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _sample_tf_pure_psitable &rArr; vatek_transform_psitable_register &rArr; vatek_psitable_register &rArr; psitable_register_put &rArr; vatek_hms_write_halbuf &rArr; vatek_hms_write_hal &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_transform_psitable_register
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_program
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sample_tf_play_allprogram
</UL>

<P><STRONG><a name="[7]"></a>_default_cli_dump_reg_all</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uart_cmdline.o(i._default_cli_dump_reg_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _default_cli_dump_reg_all &rArr; vatek_hms_read_reg &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_reg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_cmdline.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_default_cli_dump_reg_one</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uart_cmdline.o(i._default_cli_dump_reg_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _default_cli_dump_reg_one &rArr; vatek_hms_read_reg &rArr; hms_i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vatek_hms_read_reg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_cmdline.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>_default_cli_dump_reg_range</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart_cmdline.o(i._default_cli_dump_reg_range))
<BR>[Address Reference Count : 1]<UL><LI> uart_cmdline.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>_default_cli_help</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_cmdline.o(i._default_cli_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _default_cli_help &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_cmdline.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>_default_cli_write_reg_one</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart_cmdline.o(i._default_cli_write_reg_one))
<BR>[Address Reference Count : 1]<UL><LI> uart_cmdline.o(.data)
</UL>
<P><STRONG><a name="[c5]"></a>Get_SerialNum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_desc.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
</UL>

<P><STRONG><a name="[c6]"></a>IntToUnicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[13]"></a>CUSTOM_HID_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>CUSTOM_HID_Init_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_Init_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>CUSTOM_HID_OutEvent_FS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_OutEvent_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[f1]"></a>PCD_EP_OutSetupPacket_int</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.PCD_EP_OutSetupPacket_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>USB_CoreReset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[d4]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[d5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[127]"></a>UART_SetConfig</STRONG> (Thumb, 992 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[129]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[15a]"></a>USBD_ClrFeature</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[162]"></a>USBD_GetConfig</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[163]"></a>USBD_GetDescriptor</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[165]"></a>USBD_GetLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[164]"></a>USBD_GetStatus</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[172]"></a>USBD_SetAddress</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[173]"></a>USBD_SetConfig</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[176]"></a>USBD_SetFeature</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[19]"></a>USBD_CUSTOM_HID_DataIn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DataIn))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_CUSTOM_HID_DataOut</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CUSTOM_HID_DataOut &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBD_CUSTOM_HID_DeInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CUSTOM_HID_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_CUSTOM_HID_EP0_RxReady</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CUSTOM_HID_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_CUSTOM_HID_GetDeviceQualifierDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetDeviceQualifierDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_CUSTOM_HID_GetFSCfgDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetFSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_CUSTOM_HID_GetHSCfgDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetHSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_CUSTOM_HID_GetOtherSpeedCfgDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetOtherSpeedCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_CUSTOM_HID_Init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_CUSTOM_HID_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_CUSTOM_HID_Setup</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_CUSTOM_HID_Setup &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[17c]"></a>_printf_core</STRONG> (Thumb, 984 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[186]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[185]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17d]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
